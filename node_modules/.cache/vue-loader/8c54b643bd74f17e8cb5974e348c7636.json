{"remainingRequest":"/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/src/views/curso/Tema1.vue?vue&type=template&id=23f986e4&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/src/views/curso/Tema1.vue","mtime":1742878894743},{"path":"/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Gerencia_Talento_Humano/U3_Gerencia_Talento_Humano/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}